/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PatternImport } from './routes/pattern'
import { Route as MainImport } from './routes/main'
import { Route as LinkedlistImport } from './routes/linkedlist'
import { Route as ArrayImport } from './routes/array'
import { Route as R150Import } from './routes/150'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PatternRoute = PatternImport.update({
  id: '/pattern',
  path: '/pattern',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

const LinkedlistRoute = LinkedlistImport.update({
  id: '/linkedlist',
  path: '/linkedlist',
  getParentRoute: () => rootRoute,
} as any)

const ArrayRoute = ArrayImport.update({
  id: '/array',
  path: '/array',
  getParentRoute: () => rootRoute,
} as any)

const R150Route = R150Import.update({
  id: '/150',
  path: '/150',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/150': {
      id: '/150'
      path: '/150'
      fullPath: '/150'
      preLoaderRoute: typeof R150Import
      parentRoute: typeof rootRoute
    }
    '/array': {
      id: '/array'
      path: '/array'
      fullPath: '/array'
      preLoaderRoute: typeof ArrayImport
      parentRoute: typeof rootRoute
    }
    '/linkedlist': {
      id: '/linkedlist'
      path: '/linkedlist'
      fullPath: '/linkedlist'
      preLoaderRoute: typeof LinkedlistImport
      parentRoute: typeof rootRoute
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/pattern': {
      id: '/pattern'
      path: '/pattern'
      fullPath: '/pattern'
      preLoaderRoute: typeof PatternImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/150': typeof R150Route
  '/array': typeof ArrayRoute
  '/linkedlist': typeof LinkedlistRoute
  '/main': typeof MainRoute
  '/pattern': typeof PatternRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/150': typeof R150Route
  '/array': typeof ArrayRoute
  '/linkedlist': typeof LinkedlistRoute
  '/main': typeof MainRoute
  '/pattern': typeof PatternRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/150': typeof R150Route
  '/array': typeof ArrayRoute
  '/linkedlist': typeof LinkedlistRoute
  '/main': typeof MainRoute
  '/pattern': typeof PatternRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/150' | '/array' | '/linkedlist' | '/main' | '/pattern'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/150' | '/array' | '/linkedlist' | '/main' | '/pattern'
  id:
    | '__root__'
    | '/'
    | '/150'
    | '/array'
    | '/linkedlist'
    | '/main'
    | '/pattern'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R150Route: typeof R150Route
  ArrayRoute: typeof ArrayRoute
  LinkedlistRoute: typeof LinkedlistRoute
  MainRoute: typeof MainRoute
  PatternRoute: typeof PatternRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R150Route: R150Route,
  ArrayRoute: ArrayRoute,
  LinkedlistRoute: LinkedlistRoute,
  MainRoute: MainRoute,
  PatternRoute: PatternRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/150",
        "/array",
        "/linkedlist",
        "/main",
        "/pattern"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/150": {
      "filePath": "150.tsx"
    },
    "/array": {
      "filePath": "array.tsx"
    },
    "/linkedlist": {
      "filePath": "linkedlist.tsx"
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/pattern": {
      "filePath": "pattern.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
